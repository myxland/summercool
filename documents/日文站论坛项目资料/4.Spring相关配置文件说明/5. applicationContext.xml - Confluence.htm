<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0069)http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml -->
<HTML><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <TITLE>5. applicationContext.xml - Confluence</TITLE>
            
<META id="confluence-context-path" name="confluence-context-path" content="">
<SCRIPT type="text/javascript">
    // Deprecated global variables. To be removed in a future version of Confluence.
    var contextPath = '';
    var i18n = [];
</SCRIPT>



<!-- include system resources -->
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/master.css" title="Confluence Master Stylesheet" media="all">
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/wiki-content.css" media="all">
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/tabs.css" media="all">
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/menu.css" media="all">
<!--[if IE]>
<link type="text/css" rel="stylesheet" href="/s/1322/11/1.0/_/download/resources/confluence.web.resources:master-styles/menu-ie.css" media="all"/>
<![endif]-->
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/tables.css" media="all">
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/panels.css" media="all">
<!--[if IE]>
<link type="text/css" rel="stylesheet" href="/s/1322/11/1.0/_/download/resources/confluence.web.resources:master-styles/master-ie.css" title="Master-IE" media="all"/>
<![endif]-->
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/renderer-macros.css" media="all">
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/information-macros.css" media="all">
<LINK type="text/css" rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/layout-macros.css" media="all">
<SCRIPT type="text/javascript" src="./5. applicationContext.xml - Confluence_files/yahoo-dom-event.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./5. applicationContext.xml - Confluence_files/atlassian.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./5. applicationContext.xml - Confluence_files/breadcrumbs.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./5. applicationContext.xml - Confluence_files/atlassian-effects.js"></SCRIPT>

<!-- end system resources -->

    <LINK rel="stylesheet" href="./5. applicationContext.xml - Confluence_files/combined.css" type="text/css">

    <META name="confluence-request-time" content="1254214305674">
<LINK rel="shortcut icon" href="http://b2b-doc.alibaba-inc.com/images/icons/favicon.ico">
<LINK rel="icon" type="image/png" href="http://b2b-doc.alibaba-inc.com/images/icons/favicon.png">


    

    <SCRIPT type="text/javascript">

    function toggleMenu(menuId)
    {
        var visible = toggleVisibility(menuId);
        if (visible)
            setCookie("confluence.leftnav." + menuId, true);
        else
            setCookie("confluence.leftnav.", false);
    }

    function isMenuExpanded(menuId)
    {
        return getCookie("confluence.leftnav." + menuId);
    }

    function initMenuItem(menuId)
    {
        if (document.getElementById(menuId))
        {
            if (isMenuExpanded(menuId) == 'true')
            {
                document.getElementById(menuId).style.display = "block";
            }
            else
            {
                document.getElementById(menuId).style.display = "none";
            }
        }
    }
</SCRIPT>

</HEAD><BODY onload="placeFocus()" id="com-atlassian-confluence">
    


    <SCRIPT type="text/javascript">
        function hideMessage(messageId)
        {
            var message = document.getElementById(messageId)
            message.style.display = "none";
            setCookie(messageId, true);
        }
    </SCRIPT>

        

<DIV id="header">
        <FORM id="quick-search" method="post" action="http://b2b-doc.alibaba-inc.com/dosearchsite.action">
                <FIELDSET>
            <LEGEND>Quick Search</LEGEND>
            <INPUT type="hidden" name="quickSearch" value="true">
                        <INPUT type="hidden" name="searchQuery.spaceKey" value="conf_global">
            <INPUT id="quick-search-query" type="text" accesskey="q" name="searchQuery.queryString" size="25">
            <INPUT id="quick-search-submit" type="submit" value="Search">
        </FIELDSET>
        <FIELDSET class="hidden parameters">
            <INPUT type="hidden" id="quickSearchPlaceholder" value="Search">
        </FIELDSET>
    </FORM>
        
    
    <OL id="breadcrumbs">
                    
        <LI><SPAN>
                                    <A href="http://b2b-doc.alibaba-inc.com/dashboard.action">Dashboard</A>
                </SPAN></LI>
                    
        <LI><SPAN>
         &gt;                             <A href="http://b2b-doc.alibaba-inc.com/display/jcbu">04 JCBU文档</A>
                </SPAN></LI>
                                        <LI id="ellipsis" title="    &hellip;
                    Home
             &gt;         01 日文站项目空间
             &gt;         79 C2J论坛项目
             &gt;         C2J论坛框架文档
        &hellip;"><SPAN>&gt; <STRONG>…</STRONG></SPAN></LI>
                                    
        <LI class="hidden-crumb"><SPAN>
         &gt;                             <A href="http://b2b-doc.alibaba-inc.com/display/jcbu/Home">Home</A>
                </SPAN></LI>
                                
        <LI class="hidden-crumb"><SPAN>
         &gt;                             <A href="http://b2b-doc.alibaba-inc.com/pages/viewpage.action?pageId=9470757">01 日文站项目空间</A>
                </SPAN></LI>
                                
        <LI class="hidden-crumb"><SPAN>
         &gt;                             <A href="http://b2b-doc.alibaba-inc.com/pages/viewpage.action?pageId=22023076">79 C2J论坛项目</A>
                </SPAN></LI>
                                
        <LI class="hidden-crumb"><SPAN>
         &gt;                             <A href="http://b2b-doc.alibaba-inc.com/pages/viewpage.action?pageId=29297881">C2J论坛框架文档</A>
                </SPAN></LI>
                    
        <LI><SPAN>
         &gt;                             <A href="http://b2b-doc.alibaba-inc.com/pages/viewpage.action?pageId=30179439">四、Spring相关配置文件说明</A>
                </SPAN></LI>
                    
        <LI><SPAN>
         &gt;                             5. applicationContext.xml
                </SPAN></LI>
        </OL>

</DIV>

<DIV id="PageContent">
    <TABLE cellspacing="0" cellpadding="0" width="100%">
        <TBODY><TR>
                    <TD width="150px" valign="top" class="sidebar" nowrap="">
                <DIV class="leftnav">
                     <DIV id="logodiv">
                        					        					                          </DIV>
                      <DIV id="menu">
                        
                        
<H5><A href="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml#" onclick="toggleMenu(&#39;pagenav&#39;); return false;"><IMG src="./5. applicationContext.xml - Confluence_files/docs_16.gif" width="16" height="16" border="0" align="absmiddle"> Page Operations</A></H5>
<DIV id="pagenav" class="subnav" style="display: block; ">
   <UL>
	   		   <LI><A id="viewPageLink" href="./5. applicationContext.xml - Confluence_files/5. applicationContext.xml - Confluence.htm" class="current" accesskey="v"><U>V</U>iew</A></LI>
	   		   <LI><A id="editPageLink" href="http://b2b-doc.alibaba-inc.com/pages/editpage.action?pageId=31248777" accesskey="e"><U>E</U>dit</A></LI>
	   		   <LI><A id="view-attachments-link" href="http://b2b-doc.alibaba-inc.com/pages/viewpageattachments.action?pageId=31248777" accesskey="a"><U>A</U>ttachments (0)</A></LI>
	   		   <LI><A id="view-page-info-link" href="http://b2b-doc.alibaba-inc.com/pages/viewinfo.action?pageId=31248777" accesskey="i"><U>I</U>nfo</A></LI>
	      </UL>
</DIV>

                        
                        
<H5><A href="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml#" onclick="toggleMenu(&#39;browsenav&#39;); return false;"><IMG src="./5. applicationContext.xml - Confluence_files/browse_space.gif" height="16" width="16" border="0" align="absmiddle" title="Find Content"> Browse Space</A></H5>
<DIV id="browsenav" class="subnav" style="display: none; ">
	<UL>
					<LI><A href="http://b2b-doc.alibaba-inc.com/pages/listpages.action?key=jcbu">Pages</A></LI>
					<LI><A href="http://b2b-doc.alibaba-inc.com/pages/viewrecentblogposts.action?key=jcbu">News</A></LI>
					<LI><A href="http://b2b-doc.alibaba-inc.com/labels/listlabels-heatmap.action?key=jcbu">Labels</A></LI>
					<LI><A href="http://b2b-doc.alibaba-inc.com/spaces/listattachmentsforspace.action?key=jcbu">Attachments</A></LI>
					<LI><A href="http://b2b-doc.alibaba-inc.com/spaces/space-bookmarks.action?spaceKey=jcbu">Bookmarks</A></LI>
					<LI><A href="http://b2b-doc.alibaba-inc.com/spaces/viewmailarchive.action?key=jcbu">Mail</A></LI>
					<LI><A href="http://b2b-doc.alibaba-inc.com/spaces/viewspacesummary.action?key=jcbu">Advanced</A></LI>
			</UL>
</DIV>

<H5><A href="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml#" onclick="toggleMenu(&#39;addcontent&#39;); return false;"><IMG src="./5. applicationContext.xml - Confluence_files/add_16.gif" height="16" width="16" border="0" align="absmiddle" title="Find Content"> Add Content</A></H5>
<DIV id="addcontent" class="subnav" style="display: block; ">
    <UL>
										
									<LI><A href="http://b2b-doc.alibaba-inc.com/pages/createpage.action?spaceKey=jcbu&fromPageId=31248777"><IMG src="./5. applicationContext.xml - Confluence_files/add_page_16.gif" height="16" width="16" border="0" align="absmiddle" title="Add Page">&nbsp;Add Page</A></LI>
						    			</UL>
</DIV>

                      </DIV>
                    <SCRIPT type="text/javascript">
                        initMenuItem("browsenav");
                        initMenuItem("pagenav");
                        initMenuItem("addcontent");
                    </SCRIPT>
                </DIV>
            </TD>
                    <TD valign="top" width="100%">
                <!-- Inner content table -->
                <TABLE width="100%" cellpadding="2" cellspacing="0">
                    <TBODY><TR>
                        <TD colspan="2" valign="middle" align="right" style="background-color:#F0F0F0">
                            
    <UL id="page-view-panel">
        <LI>    <A href="http://b2b-doc.alibaba-inc.com/pages/viewpage.action?spaceKey=jcbu&title=5.+applicationContext.xml&decorator=printable" rel="nofollow" title="View a printable version of the current page." class="print icon">View a printable version of the current page.</A>
</LI>
                        
                                     </UL>

                                        <UL id="user-control-panel">
                    <LI class="first">Welcome <A href="http://b2b-doc.alibaba-inc.com/display/~shaochuan.wangsc">王少川</A></LI>

                            <LI><A href="http://b2b-doc.alibaba-inc.com/users/viewuserhistory.action" onclick="window.open(this.href,&#39;user_history&#39;, &#39;width=620, height=600, resizable&#39;); return false;" title="View History">History</A></LI>
            
            <LI><A href="http://b2b-doc.alibaba-inc.com/users/viewuserprofile.action?username=shaochuan.wangsc">Preferences</A></LI>

            
            <LI><A href="http://b2b-doc.alibaba-inc.com/logout.action" id="logout">Log Out</A></LI>
                </UL>
                            </TD>
                    </TR>
                    <TR>
                        <TD id="mainViewPane">
                            <DIV>
                                <TABLE class="fullWidthBorderless">
                                    <TBODY><TR><TD><SPAN id="spaceFullNameLink">            <A href="http://b2b-doc.alibaba-inc.com/display/jcbu">04 JCBU文档</A>    </SPAN></TD>
                                    <TD align="right">
    <A id="pageFavourite" href="http://b2b-doc.alibaba-inc.com/labels/addfavourite.action?entityId=31248777"><IMG src="./5. applicationContext.xml - Confluence_files/star_grey.gif" height="16" width="16" border="0" align="absmiddle" title="Add this page to your favourites list" alt="Add this page to your favourites list"></A>
    <A id="pageWatch" href="http://b2b-doc.alibaba-inc.com/spaces/viewspacecontent.action?key=jcbu"><IMG src="./5. applicationContext.xml - Confluence_files/add_space_notification_16.gif" height="16" width="16" border="0" align="absmiddle" title="You are currently watching the 04 JCBU文档 space" alt="You are currently watching the 04 JCBU文档 space"></A>
</TD>
                                </TR></TBODY></TABLE>
                                <H1>
                                                                            <A href="./5. applicationContext.xml - Confluence_files/5. applicationContext.xml - Confluence.htm">5. applicationContext.xml</A>
                                    </H1>
                            </DIV>
                                                        <DIV id="content">
                                <!--
    Root decorator: all decisions about how a page is to be decorated via the
                    inline decoration begins here.
-->



<!--
    Switch based upon the context. However, for now, just delegate to a decorator
    identified directly by the context.
-->


    
    <!--[if gte IE 5.5000]>
<script language="JavaScript">
function correctPNG() // correctly handle PNG transparency in Win IE 5.5 or higher.
   {
   for(var i=0; i<document.images.length; i++)
      {
	  var img = document.images[i]
	  var imgName = img.src.toUpperCase()
	  if (imgName.substring(imgName.length-3, imgName.length) == "PNG")
	     {
		 var imgID = (img.id) ? "id='" + img.id + "' " : ""
		 var imgClass = (img.className) ? "class='" + img.className + "' " : ""
		 var imgTitle = (img.title) ? "title='" + img.title + "' " : "title='" + img.alt + "' "
		 var imgStyle = "display:inline-block;" + img.style.cssText
		 if (img.align == "left") imgStyle = "float:left;" + imgStyle
		 if (img.align == "right") imgStyle = "float:right;" + imgStyle
		 if (img.parentElement.href) imgStyle = "cursor:hand;" + imgStyle
		 var strNewHTML = "<span " + imgID + imgClass + imgTitle
		 + " style=\"" + "width:" + img.width + "px; height:" + img.height + "px;" + imgStyle + ";"
	     + "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
		 + "(src=\'" + img.src + "\', sizingMethod='scale');\"></span>"
		 img.outerHTML = strNewHTML
		 i = i-1
	     }
      }
   }
window.attachEvent("onload", correctPNG);
</script>
<![endif]-->


































    
<DIV class="smalltext">
                Added by <A href="http://b2b-doc.alibaba-inc.com/display/~shaochuan.wangsc">王少川</A>, last edited by <A href="http://b2b-doc.alibaba-inc.com/display/~shaochuan.wangsc">王少川</A> on Jun 22, 2009
                      &nbsp;(<A class="noprint" href="http://b2b-doc.alibaba-inc.com/pages/diffpages.action?pageId=31248777&originalId=31983463">view change</A>)
              
    
 
<DIV id="labels-section">
    <DIV id="labels-header" class="section-header">
        <H2 class="section-title">Labels</H2>&nbsp;
                <SPAN id="labels-edit-link" class="inline-control-link">
            <A href="" onclick="onAddLabel(); showLabelsInput(); return false;">Edit Labels</A>
        </SPAN>
            </DIV>
    <DIV id="labelsList">
                    (None)
            </DIV>

    <!-- Delay the loading of the external javascript file needed for labels (as it takes too long to load and visibly holds loading of the page body) -->
    <!-- To do this without javascript errors over undefined functions, we need to declare stubs here (that are overrided later by the proper implementations) -->
    <SCRIPT type="text/javascript">
        function doAddLabel(hideTextfieldAfterAddParam)
        {
            // stub
        }

        function onAddLabel()
        {
            // stub
        }

        function showLabelsInput()
        {
            // stub
        }
    </SCRIPT>

    <!-- This is a hack to work around an apparent SiteMesh bug - http://jira.opensymphony.com/browse/SIM-198 -->
    

    <SPAN class="error"><SPAN class="errorMessage" id="errorSpan"></SPAN></SPAN>
    <FORM name="addLabelForm" method="" action="" onsubmit="doAddLabel(false); return false;" style="margin: 0px; padding: 0px">
        <DIV id="labelInputSpan" style="display: none">
            <DIV style="border: 1px solid #cccccc; padding: 8px; background-color: #f0f0f0">

            <DIV id="labelOperationErrorContainer" style="display: none"><SPAN class="error"><SPAN class="errorMessage" id="labelOperationErrorMessage"></SPAN></SPAN></DIV>

            <TABLE width="90%">
                <TBODY><TR>
                    <TD>
                        <DIV class="formtitle" style="padding-bottom: 3px; font-size: 13px;">Add Labels</DIV>
                    </TD>
                    <TD align="right"><DIV id="waitImageAndStatus" style="display: none; height: 16px;"><IMG alt="Wait Image" border="0" align="absmiddle" src="./5. applicationContext.xml - Confluence_files/wait.gif">&nbsp;<SPAN id="labelOperationStatus" class="smalltext" style="vertical-align: middle"></SPAN></DIV></TD>
                </TR>
                <TR><TD width="50%">
                        Enter labels to add to this page:<BR>
            <INPUT autocomplete="off" type="text" id="labelName" name="labelsString" value="" class="monospaceInput" size="40">
            <INPUT type="submit" onclick="doAddLabel(false); return false;" value="Add"><INPUT type="button" onclick="doAddLabel(true); return false;" value="Done">
            <DIV class="auto_complete" id="labelsAutocompleteList" style="display: none; "></DIV>
            <DIV class="smalltext">
                Looking for a label? Just start typing.
            </DIV>
            </TD>
                <TD width="50%" valign="top">
                    <DIV id="suggestedLabelsSpan"></DIV>
                </TD>
            </TR></TBODY></TABLE>
            </DIV>
        </DIV>
    </FORM>
</DIV>
</DIV>


<DIV class="wiki-content" style="margin-right:10px;">
   <!-- wiki content -->
            <H3><A name="5.applicationContext.xml-1.%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE"></A>1.全局变量配置</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中全局变量的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;bean id=<SPAN class="code-quote">"hostBean"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.web.host.HostBean"</SPAN>&gt;
	&lt;property name=<SPAN class="code-quote">"hostName"</SPAN> value=<SPAN class="code-quote">"club"</SPAN>/&gt;
	&lt;property name=<SPAN class="code-quote">"hostModuleAttributes"</SPAN> ref=<SPAN class="code-quote">"moduleAttributes"</SPAN>/&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. /biz/core/spring/common-service.xml文件中moduleAttributes的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- host 及 module 映射关系设置 --&gt;
&lt;bean id=<SPAN class="code-quote">"moduleAttributes"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.biz.common.collection.ModuleHashMap"</SPAN>&gt;
    &lt;constructor-arg&gt;
        &lt;map&gt;
            &lt;entry key=<SPAN class="code-quote">"homeModule"</SPAN> value=<SPAN class="code-quote">"${japan.club.host}:${japan.club.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"adminModule"</SPAN> value=<SPAN class="code-quote">"${japan.club.admin.host}:${japan.club.admin.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"cssModule"</SPAN> value=<SPAN class="code-quote">"${japan.club.css.host}:${japan.club.css.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"imageModule"</SPAN> value=<SPAN class="code-quote">"${japan.club.image.host}:${japan.club.image.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"jsModule"</SPAN> value=<SPAN class="code-quote">"${japan.club.js.host}:${japan.club.js.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"postImageModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.image.host}:${japan.alibaba.image.port}/img/club/#imagePath#"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.host}:${japan.alibaba.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"myalibabaModule"</SPAN> value=<SPAN class="code-quote">"${japan.myalibaba.host}:${japan.myalibaba.port}/${japan.myalibaba.path}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaImageModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.image.host}:${japan.alibaba.image.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaSampleImageModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.image.host}:${japan.alibaba.image.port}/img/product/#imagePath#"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaCompanyImageModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.image.host}:${japan.alibaba.image.port}/img/chinasupply/japan/aboutus/#imagePath#"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaFreeMinisiteModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.free.minisite.host}:${japan.alibaba.free.minisite.port}/companydetail/#companyId#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaPaidMinisiteModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.paid.minisite.host}:${japan.alibaba.paid.minisite.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaCompanyListModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.host}:${japan.alibaba.port}/companies/#categoryId#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaPaidCompanyVideoModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.paid.minisite.host}:${japan.alibaba.paid.minisite.port}/companyVideo/0.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaFreeSampleDetailModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.free.minisite.host}:${japan.alibaba.free.minisite.port}/product/#sampleId#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaPaidSampleDetailModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.paid.minisite.host}:${japan.alibaba.paid.minisite.port}/product/#sampleId#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"etcModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.etc.host}:${japan.alibaba.etc.port}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"etcIdCheckUrl"</SPAN> value=<SPAN class="code-quote">"${japan.etc.id.check.url}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"etcEmailCheckUrl"</SPAN> value=<SPAN class="code-quote">"${japan.etc.email.check.url}"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"alibabaCategoryModule"</SPAN> value=<SPAN class="code-quote">"${japan.alibaba.host}:${japan.alibaba.port}/products/#categoryId#.htm"</SPAN> /&gt;

            &lt;!-- 应用使用 UrlBuilder --&gt;
            &lt;entry key=<SPAN class="code-quote">"topicDetailModule"</SPAN> value=<SPAN class="code-quote">"/topic/topicDetail/#tid#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"topicReplyDetailModule"</SPAN> value=<SPAN class="code-quote">"/topic/topicDetail/topicDetail-tid-#tid#-rid-#rid#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"searchCategoryModule"</SPAN> value=<SPAN class="code-quote">"/search-cid-#cid#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"searchTypeModule"</SPAN> value=<SPAN class="code-quote">"/search-tid-#tid#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"searchWordModule"</SPAN> value=<SPAN class="code-quote">"/search-searchWord-#word#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"searchTypeCategoryModule"</SPAN> value=<SPAN class="code-quote">"/search-tid-#tid#-cid-#cid#.htm"</SPAN> /&gt;

            &lt;!-- 邮件模版信使用 UrlBuilder --&gt;
            &lt;entry key=<SPAN class="code-quote">"topicDetailModuleForMail"</SPAN> value=<SPAN class="code-quote">"${japan.club.host}:${japan.club.port}/topic/topicDetail/#tid#.htm"</SPAN> /&gt;
            &lt;entry key=<SPAN class="code-quote">"topicReplyDetailModuleForMail"</SPAN> value=<SPAN class="code-quote">"${japan.club.host}:${japan.club.port}/topic/topicDetail/topicDetail-tid-#tid#-rid-#rid#.htm"</SPAN> /&gt;
        &lt;/map&gt;
    &lt;/constructor-arg&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. com.alibaba.japan.club.web.host.HostBean的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java"><SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.web.host;

<SPAN class="code-keyword">import</SPAN> java.util.Map;

<SPAN class="code-keyword">import</SPAN> org.springframework.beans.BeansException;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.ApplicationContext;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.ApplicationContextAware;

/**
 * 此类是为了存放相关的host信息&lt;br&gt;
 * 此类中的hostModuleAttributes属性值会被注册到freemarker页面的全局静态变量中
 *
 * @author:shaochuan.wangsc
 * @date:2009-3-24
 *
 */
<SPAN class="code-keyword">public</SPAN> class HostBean <SPAN class="code-keyword">implements</SPAN> ApplicationContextAware{

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> HOST_BEAN = <SPAN class="code-quote">"hostBean"</SPAN>;

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-object">Boolean</SPAN> alreadyInit = <SPAN class="code-object">Boolean</SPAN>.FALSE;

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-object">String</SPAN> hostName;

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-keyword">static</SPAN> HostBean hostBean;

    <SPAN class="code-keyword">private</SPAN> Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; hostModuleAttributes;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-object">String</SPAN> getHostName() {
        <SPAN class="code-keyword">return</SPAN> hostName;
    }

    <SPAN class="code-keyword">public</SPAN> void setHostName(<SPAN class="code-object">String</SPAN> hostName) {
        <SPAN class="code-keyword">this</SPAN>.hostName = hostName;
    }

    <SPAN class="code-keyword">public</SPAN> Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; getHostModuleAttributes() {
        <SPAN class="code-keyword">return</SPAN> hostModuleAttributes;
    }

    <SPAN class="code-keyword">public</SPAN> void setHostModuleAttributes(Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; hostModuleAttributes) {
        <SPAN class="code-keyword">this</SPAN>.hostModuleAttributes = hostModuleAttributes;
    }

    <SPAN class="code-keyword">public</SPAN> void setApplicationContext(ApplicationContext applicationContext) <SPAN class="code-keyword">throws</SPAN> BeansException {
        <SPAN class="code-keyword">if</SPAN> (!alreadyInit) {
            hostBean =  (HostBean) applicationContext.getBean(HOST_BEAN);
            alreadyInit = <SPAN class="code-object">Boolean</SPAN>.TRUE;
        }
    }

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> HostBean getInstance() {
        <SPAN class="code-keyword">return</SPAN> hostBean;
    }
}</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. com.alibaba.japan.club.web.host.HostModule的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java"><SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.web.host;

/**
 * 绑定论坛相关模块的主机名和端口
 *
 * @author:liujie.liuj
 * @date:2009-4-16
 *
 */
<SPAN class="code-keyword">public</SPAN> class HostModule {

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_HOME;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_HOME_INDEX;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_CSS;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_IMAGE;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_JS;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_ADMIN_INDEX;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> CLUB_ADMIN;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ALIBABA_JAPAN_HOME;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ALIBABA_JAPAN_IMAGE;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ALIBABA_JAPAN_MYALIBABA;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ALIBABA_JAPAN_PAID_MINISITE;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ALIBABA_JAPAN_FREE_MINISITE;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ETC_ID_CHECK_URL;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ETC_EMAIL_CHECK_URL;

    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> ALIBABA_JAPAN_CATEGORY;

    <SPAN class="code-keyword">static</SPAN> {
        HostBean hostBean = HostBean.getInstance();

        <SPAN class="code-comment">// 论坛主机名和端口
</SPAN>        CLUB_HOME = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"homeModule"</SPAN>);

        <SPAN class="code-comment">// 论坛首页
</SPAN>        CLUB_HOME_INDEX = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"homeModule"</SPAN>) + <SPAN class="code-quote">"/index.htm"</SPAN>;

        <SPAN class="code-comment">// 论坛css模块的主机名和端口
</SPAN>        CLUB_CSS = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"cssModule"</SPAN>);

        <SPAN class="code-comment">// 论坛图片模块主机名和端口
</SPAN>        CLUB_IMAGE = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"imageModule"</SPAN>);

        <SPAN class="code-comment">// 论坛js模块主机名和端口
</SPAN>        CLUB_JS = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"jsModule"</SPAN>);

        <SPAN class="code-comment">// 论坛后台模块的主机名和端口
</SPAN>        CLUB_ADMIN = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"adminModule"</SPAN>);

        <SPAN class="code-comment">// 论坛后台模块的首页
</SPAN>        CLUB_ADMIN_INDEX = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"adminModule"</SPAN>) + <SPAN class="code-quote">"/index.htm"</SPAN>;

        <SPAN class="code-comment">// C2J主机名和端口
</SPAN>        ALIBABA_JAPAN_HOME = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"alibabaModule"</SPAN>);

        <SPAN class="code-comment">// C2J图片主机名和端口
</SPAN>        ALIBABA_JAPAN_IMAGE = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"alibabaImageModule"</SPAN>);

        <SPAN class="code-comment">// C2J myalibaba 主机名和端口
</SPAN>        ALIBABA_JAPAN_MYALIBABA = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"myalibabaModule"</SPAN>);

        <SPAN class="code-comment">// C2J收费会员minisite
</SPAN>        ALIBABA_JAPAN_PAID_MINISITE = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"alibabaPaidMinisiteModule"</SPAN>);

        <SPAN class="code-comment">// C2J免费会员minisite
</SPAN>        ALIBABA_JAPAN_FREE_MINISITE = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"alibabaFreeMinisiteModule"</SPAN>);

        <SPAN class="code-comment">// 会员id唯一性检查etc访问地址
</SPAN>        ETC_ID_CHECK_URL = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"etcIdCheckUrl"</SPAN>);

        <SPAN class="code-comment">// 会员email唯一性检查etc访问地址
</SPAN>        ETC_EMAIL_CHECK_URL = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"etcEmailCheckUrl"</SPAN>);

        <SPAN class="code-comment">// C2J类目地址
</SPAN>        ALIBABA_JAPAN_CATEGORY = hostBean.getHostModuleAttributes().get(<SPAN class="code-quote">"alibabaCategoryModule"</SPAN>);
    }
}</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，"moduleAttributes"元素先定义了需要的"module"相关的键值信息，并且拥有":80"端口的去除功能，如：<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; hostModule = <SPAN class="nobr"><A href="http://club.alibaba.co.jp/" rel="nofollow">http://club.alibaba.co.jp:80<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN> ----&gt;&nbsp; hostModule = <SPAN class="nobr"><A href="http://club.alibaba.co.jp/" rel="nofollow">http://club.alibaba.co.jp<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，"hostBean"元素通过自身实例化来实现单例模式。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. 最后，"HostModule"是为了开发方便而使用的工具类，可以使用静态属性的方式访问"moduleAttributes"中的键值。</P>

<H3><A name="5.applicationContext.xml-2.web%E5%B1%82%22module%22%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E5%8D%B3namespace%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%89"></A>2.web层"module"模型的配置（即namespace的概念）</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中<FONT color="#0000cc"><B>"module"</B></FONT>的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 定义module模型 --&gt;
&lt;bean id=<SPAN class="code-quote">"modulePattern"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.module.ModulePattern"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"urlPattern"</SPAN> value=<SPAN class="code-quote">".htm"</SPAN>/&gt;
    &lt;property name=<SPAN class="code-quote">"packagePath"</SPAN> value=<SPAN class="code-quote">"com.alibaba.japan.club.web.module"</SPAN>/&gt;
    &lt;property name=<SPAN class="code-quote">"moduleMapping"</SPAN>&gt;
        &lt;map&gt;
            &lt;entry key=<SPAN class="code-quote">"/"</SPAN> value=<SPAN class="code-quote">"/home/"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/admin/"</SPAN> value=<SPAN class="code-quote">"/admin/"</SPAN>/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，ModulePattern类的作用是保存当前web项目的相关请求urlPattern、模型类的packagePath、moduleMapping（即Struts2的namespace概念）；举例如下：<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1). &lt;property name="urlPattern" value=".htm"/&gt;：作用是标记当前Spring MVC的请求的url以".htm"结尾的请求；具体的作用会在后面进行说明。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.) &lt;property name="packagePath" value="com.alibaba.japan.club.web.module"/&gt;：作用是记录Spring MVC的Controller类的存放的位置，同时也记录了此web框架自己实现的Screean（后面会进行详细说明）类的位置。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3). &lt;property name="moduleMapping"&gt;：作用是定义请求的url与对应处理的Controller和Screen的对应关系，如下：<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <SPAN class="nobr"><A href="http://host:port/index.htm" rel="nofollow">http://host:port/index.htm<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN> ----&gt; /com/alibaba/japan/club/web/module/home/control/IndexController.java<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <SPAN class="nobr"><A href="http://host:port/admin/index.htm" rel="nofollow">http://host:port/admin/index.htm<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN> ----&gt; /com/alibaba/japan/club/web/module/admin/control/IndexController.java</P>

<H3><A name="5.applicationContext.xml-.%E9%80%9A%E8%BF%87%22module%22%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8CSpring%E7%9A%84Controller%E5%92%8CScreen%EF%BC%88Sc..."></A>3.通过"module"模型的配置进行Spring的Controller和Screen（Screen概念会在后面进行说明）的加载</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中Controller和Screen类加载的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 开始扫描 screen和controller --&gt;
&lt;bean id=<SPAN class="code-quote">"classBeanScanner"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.component.JapanBeanScanner"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"modulePattern"</SPAN> ref=<SPAN class="code-quote">"modulePattern"</SPAN>/&gt;
&lt;/bean&gt;
&lt;!-- #################################### --&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. JapanBeanScanner的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java"><SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.runtime.springmvc.component;

<SPAN class="code-keyword">import</SPAN> java.io.IOException;

<SPAN class="code-keyword">import</SPAN> org.apache.log4j.Logger;
<SPAN class="code-keyword">import</SPAN> org.springframework.beans.BeansException;
<SPAN class="code-keyword">import</SPAN> org.springframework.beans.factory.BeanClassLoaderAware;
<SPAN class="code-keyword">import</SPAN> org.springframework.beans.factory.InitializingBean;
<SPAN class="code-keyword">import</SPAN> org.springframework.beans.factory.config.AutowireCapableBeanFactory;
<SPAN class="code-keyword">import</SPAN> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.ApplicationContext;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.ApplicationContextAware;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.ResourceLoaderAware;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.io.Resource;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.io.ResourceLoader;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.io.support.PathMatchingResourcePatternResolver;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.io.support.ResourcePatternResolver;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.io.support.ResourcePatternUtils;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.type.ClassMetadata;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.type.classreading.CachingMetadataReaderFactory;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.type.classreading.MetadataReader;
<SPAN class="code-keyword">import</SPAN> org.springframework.core.type.classreading.MetadataReaderFactory;
<SPAN class="code-keyword">import</SPAN> org.springframework.util.ClassUtils;
<SPAN class="code-keyword">import</SPAN> org.springframework.web.context.support.XmlWebApplicationContext;
<SPAN class="code-keyword">import</SPAN> org.springframework.web.servlet.mvc.Controller;

<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.module.ModuleHelper;
<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.module.ModulePattern;
<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.servlet.view.freemarker.FreeMarkerScreen;

/***
 * Spring扫描类
 *
 * @author shaochuan.wangsc
 * @date 2009-3-24
 *
 */
<SPAN class="code-keyword">public</SPAN> class JapanBeanScanner <SPAN class="code-keyword">implements</SPAN> ApplicationContextAware, BeanClassLoaderAware, ResourceLoaderAware,
        InitializingBean {

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> Logger logger = Logger.getLogger(JapanBeanScanner.class);

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> <SPAN class="code-object">String</SPAN> RESOURCE_PATTERN = <SPAN class="code-quote">"**/*.class"</SPAN>;

    <SPAN class="code-keyword">private</SPAN> ModulePattern modulePattern;

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-object">boolean</SPAN> alreadyInit = <SPAN class="code-keyword">false</SPAN>;

    <SPAN class="code-keyword">private</SPAN> XmlWebApplicationContext applicationContext;

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-object">ClassLoader</SPAN> classLoader;

    <SPAN class="code-keyword">private</SPAN> ResourcePatternResolver resourcePatternResolver = <SPAN class="code-keyword">new</SPAN> PathMatchingResourcePatternResolver();

    <SPAN class="code-keyword">public</SPAN> void setModulePattern(ModulePattern modulePattern) {
        <SPAN class="code-keyword">this</SPAN>.modulePattern = modulePattern;
    }

    <SPAN class="code-keyword">public</SPAN> void setApplicationContext(ApplicationContext applicationContext) <SPAN class="code-keyword">throws</SPAN> BeansException {
        <SPAN class="code-keyword">if</SPAN> (alreadyInit == <SPAN class="code-keyword">false</SPAN>) {
            <SPAN class="code-keyword">this</SPAN>.applicationContext = (XmlWebApplicationContext) applicationContext;
            alreadyInit = <SPAN class="code-keyword">true</SPAN>;
        }
    }

    <SPAN class="code-keyword">public</SPAN> void setBeanClassLoader(<SPAN class="code-object">ClassLoader</SPAN> classLoader) {
        <SPAN class="code-keyword">this</SPAN>.classLoader = classLoader;
    }

    <SPAN class="code-keyword">public</SPAN> void setResourceLoader(ResourceLoader resourceLoader) {
        <SPAN class="code-keyword">this</SPAN>.resourcePatternResolver = (resourceLoader != <SPAN class="code-keyword">null</SPAN> ? ResourcePatternUtils
                .getResourcePatternResolver(resourceLoader) : <SPAN class="code-keyword">new</SPAN> PathMatchingResourcePatternResolver());
    }

    <SPAN class="code-keyword">public</SPAN> void afterPropertiesSet() <SPAN class="code-keyword">throws</SPAN> Exception {
        <SPAN class="code-object">String</SPAN> path = modulePattern.getPackagePath();
        scanPackage(path);
    }

    /**
     * 进行包扫描
     *
     * @param path
     */
    <SPAN class="code-keyword">private</SPAN> void scanPackage(<SPAN class="code-object">String</SPAN> path) {
        <SPAN class="code-keyword">try</SPAN> {
            <SPAN class="code-object">String</SPAN> pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(path) + <SPAN class="code-quote">"/"</SPAN> + RESOURCE_PATTERN;
            Resource[] resources = <SPAN class="code-keyword">this</SPAN>.resourcePatternResolver.getResources(pattern);
            MetadataReaderFactory readerFactory = <SPAN class="code-keyword">new</SPAN> CachingMetadataReaderFactory(<SPAN class="code-keyword">this</SPAN>.resourcePatternResolver);
            <SPAN class="code-keyword">for</SPAN> (Resource resource : resources) {
                <SPAN class="code-keyword">if</SPAN> (resource.isReadable()) {
                    MetadataReader reader = readerFactory.getMetadataReader(resource);
                    ClassMetadata classMetadata = reader.getClassMetadata();
                    <SPAN class="code-keyword">if</SPAN> (classMetadata.isConcrete()) {
                        registerClass(classMetadata.getClassName());
                    }
                }
            }
        } <SPAN class="code-keyword">catch</SPAN> (IOException e) {
            logger.error(<SPAN class="code-quote">"Failed to scan classpath <SPAN class="code-keyword">for</SPAN> unlisted classes"</SPAN>, e);
            <SPAN class="code-keyword">throw</SPAN> <SPAN class="code-keyword">new</SPAN> RuntimeException(<SPAN class="code-quote">"Failed to scan classpath <SPAN class="code-keyword">for</SPAN> unlisted classes"</SPAN>, e);
        } <SPAN class="code-keyword">catch</SPAN> (ClassNotFoundException e) {
            logger.error(<SPAN class="code-quote">"Failed to load classes from classpath"</SPAN>, e);
            <SPAN class="code-keyword">throw</SPAN> <SPAN class="code-keyword">new</SPAN> RuntimeException(<SPAN class="code-quote">"Failed to load classes from classpath"</SPAN>, e);
        } <SPAN class="code-keyword">catch</SPAN> (InstantiationException e) {
            logger.error(<SPAN class="code-quote">"Failed to load classes from classpath"</SPAN>, e);
            <SPAN class="code-keyword">throw</SPAN> <SPAN class="code-keyword">new</SPAN> RuntimeException(<SPAN class="code-quote">"Failed to load classes from classpath"</SPAN>, e);
        } <SPAN class="code-keyword">catch</SPAN> (IllegalAccessException e) {
            logger.error(<SPAN class="code-quote">"Failed to load classes from classpath"</SPAN>, e);
            <SPAN class="code-keyword">throw</SPAN> <SPAN class="code-keyword">new</SPAN> RuntimeException(<SPAN class="code-quote">"Failed to load classes from classpath"</SPAN>, e);
        }
    }

    /**
     * 注册class到spring中
     *
     * @param className
     * @<SPAN class="code-keyword">throws</SPAN> IllegalAccessException
     * @<SPAN class="code-keyword">throws</SPAN> InstantiationException
     */
    <SPAN class="code-keyword">private</SPAN> void registerClass(<SPAN class="code-object">String</SPAN> className) <SPAN class="code-keyword">throws</SPAN> ClassNotFoundException, InstantiationException,
            IllegalAccessException {
        <SPAN class="code-keyword">if</SPAN> (!(ModuleHelper.isScreenBean(className) || ModuleHelper.isControllerBean(className))) {
            <SPAN class="code-keyword">return</SPAN>;
        }
        ConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory();
        <SPAN class="code-object">Object</SPAN> clazz = beanFactory.createBean(classLoader.loadClass(className), AutowireCapableBeanFactory.AUTOWIRE_AUTODETECT, <SPAN class="code-keyword">false</SPAN>);
        <SPAN class="code-keyword">if</SPAN> (clazz <SPAN class="code-keyword">instanceof</SPAN> FreeMarkerScreen) {
            <SPAN class="code-object">String</SPAN> screenBeanName = ModuleHelper.makeScreenBeanName(modulePattern, className);
            <SPAN class="code-keyword">if</SPAN> (screenBeanName != <SPAN class="code-keyword">null</SPAN> &amp;&amp; !"".equals(screenBeanName)) {
                modulePattern.getScreenMapping().put(screenBeanName, clazz);
            }
        }
        <SPAN class="code-keyword">if</SPAN> (clazz <SPAN class="code-keyword">instanceof</SPAN> Controller) {
            <SPAN class="code-object">String</SPAN> controlBeanName = ModuleHelper.makeControlBeanName(modulePattern, className);
            <SPAN class="code-object">String</SPAN> mappingKey = ModuleHelper.makeUrlMappingKey(modulePattern, controlBeanName);
            <SPAN class="code-keyword">if</SPAN> (mappingKey != <SPAN class="code-keyword">null</SPAN> &amp;&amp; !<SPAN class="code-quote">"".equals(mappingKey) &amp;&amp; controlBeanName != <SPAN class="code-keyword">null</SPAN> &amp;&amp; !"</SPAN>".equals(controlBeanName)) {
                modulePattern.getUrlMapping().put(mappingKey, clazz);
            }
        }
    }
}</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，scanPackage(String path)：作用是扫描"<FONT color="#0000cc"><B>module</B></FONT>"模型类的"<FONT color="#0000cc"><B>packagePath</B></FONT>"下面的"<FONT color="#0000cc"><B>Controller</B></FONT>"和"<FONT color="#0000cc"><B>Screen</B></FONT>"类。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，registerClass(String className)：作用是如果将扫描到的"<FONT color="#0000cc"><B>Controller</B></FONT>"和"<FONT color="#0000cc"><B>Screen</B></FONT>"类注册到"<FONT color="#0000cc"><B>modulePattern</B></FONT>"类的"<FONT color="#0000cc"><B>screenMapping</B></FONT>"和"<FONT color="#0000cc"><B>urlMapping</B></FONT>"属性中。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. 最后， 自定义的Spring MVC的UrlHandlerMapping实现会根据上面的"<FONT color="#0000cc"><B>modulePattern</B></FONT>"类的"<FONT color="#0000cc"><B>urlMapping</B></FONT>"属性进行自动化的Controller注册。</P>

<H3><A name="5.applicationContext.xml-4.%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AF%B4%E6%98%8E"></A>4.多文件上传相关配置及说明</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中多文件上传的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 MultipartResolver --&gt;
&lt;bean id=<SPAN class="code-quote">"multipartResolver"</SPAN> class=<SPAN class="code-quote">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"defaultEncoding"</SPAN> value=<SPAN class="code-quote">"UTF-8"</SPAN>/&gt;
    &lt;property name=<SPAN class="code-quote">"maxUploadSize"</SPAN> value=<SPAN class="code-quote">"358400"</SPAN>/&gt;
    &lt;property name=<SPAN class="code-quote">"maxInMemorySize"</SPAN> value=<SPAN class="code-quote">"30720"</SPAN>/&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，Spring MVC的框架<FONT color="#000000">如果没有设置上面的</FONT><FONT color="#3300ff"><B><EM>CommonsMultipartResolver</EM></B></FONT><FONT color="#000000">类，那么上传文件功能则不会起作用；因为Spring MVC默认并没有实现多文件上传功能</FONT>。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，<FONT color="#000000">上面的</FONT><FONT color="#3300ff"><B><EM>CommonsMultipartResolver</EM></B></FONT><FONT color="#000000">类有如下三个属性非常重要</FONT>：<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1). &lt;property name="defaultEncoding" value="UTF-8"/&gt;：该参数作用是在处理多文件上传输入流的时候，以"UTF-8"编码进行读取。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2). &lt;property name="maxUploadSize" value="358400"/&gt;：该参数作用是表单中处理的单文件上传大小不能超过"358400"bytes，如果超过设置的大小，则会抛出MaxUploadSizeExceededException异常。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3). &lt;property name="maxInMemorySize" value="30720"/&gt;：该参数的作用是表单在上传文件时，如果文件不超过"30720"bytes，则不会生成临时文件在服务器的临时文件夹内，而是直接保存在内存中并最终生成到服务器的存储下面。<FONT color="#0000cc"><B>该参数非常重要，直接影响到上传文件功能的性能问题。</B></FONT></P>

<H3><A name="5.applicationContext.xml-5.%E5%A4%9A%E5%9B%BD%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E9%85%8D%E7%BD%AE"></A>5.多国语言的实现方案配置</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中多国语言的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 LocaleResolver --&gt;
&lt;bean id=<SPAN class="code-quote">"localeResolver"</SPAN> class=<SPAN class="code-quote">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</SPAN>&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，Spring MVC框架默认实现的是<FONT color="#0000cc"><B>AcceptHeaderLocaleResolver</B></FONT>，即跟据浏览器的语言设置来确定当前要访问的资源文件的语言信息。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，<FONT color="#0000cc"><B>CookieLocaleResolver</B></FONT>的实现是跟据cookie值来确定当前要访问的资源文件的语言信息；如果cookie中的语言信息为空，则跟据浏览器的语言设置来确定当前要访问的资源文件的语言信息。</P>

<H3><A name="5.applicationContext.xml-6.%E5%A4%9A%E5%9B%BD%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE"></A>6.多国语言文件加载方式的配置</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中多国语言文件加载方式的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 MessageSource --&gt;
&lt;bean id=<SPAN class="code-quote">"messageSource"</SPAN> class=<SPAN class="code-quote">"org.springframework.context.support.ResourceBundleMessageSource"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"basenames"</SPAN>&gt;
        &lt;value&gt;/message/club&lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，ResourceBundleMessageSource类是Spring MVC框架自带的加载多国语言文件的实现类。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，basenames属性里面的值，就是加载的多国语言文件；其加载路径是以当前环境的classpath为根路径。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如：/message/club ----&gt; classpath:/message/club.properties（支持多国语言文件）<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. 最后，具体的多国语言的使用方式会在后面具体的应用举例篇进行详细说明的。</P>

<H3><A name="5.applicationContext.xml-7.%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE"></A>7.主题文件加载方式的配置</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中主题文件加载方式的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 ThemeSource --&gt;
&lt;bean id=<SPAN class="code-quote">"themeSource"</SPAN> class=<SPAN class="code-quote">"org.springframework.ui.context.support.ResourceBundleThemeSource"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"basenamePrefix"</SPAN> value=<SPAN class="code-quote">"theme."</SPAN>/&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，ResourceBundleThemeSource类是Spring MVC框架自带的加载主题文件的实现类。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，basenamePrefix属性里面的值，就是加载的主题文件名；其加载路径是以当前环境的classpath为根路径。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如：/theme/theme. ----&gt; classpath:/theme/theme.properties（支持多国主题文件）<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. 最后，具体的主题的使用方式会在后面具体的应用举例篇进行详细说明的。</P>

<H3><A name="5.applicationContext.xml-8.SpringMVC%E7%9A%84HandlerMapping%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AF%B4%E6%98%8E"></A>8.Spring MVC的HandlerMapping相关配置及说明</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中HandlerMapping的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 HandlerMapping --&gt;
&lt;bean class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.servlet.handler.JapanSimpleUrlHandlerMapping"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"modulePattern"</SPAN> ref=<SPAN class="code-quote">"modulePattern"</SPAN>/&gt;
    &lt;!-- 下面可自定义control跳转 --&gt;
    &lt;property name=<SPAN class="code-quote">"moduleUrlMap"</SPAN>&gt;
        &lt;map&gt;
            &lt;entry key=<SPAN class="code-quote">"/search.htm"</SPAN> value=<SPAN class="code-quote">"/search/search.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/topic/topicDetail/*.htm"</SPAN> value=<SPAN class="code-quote">"/topic/topicDetail.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/view/bid*sty2/*.html"</SPAN> value=<SPAN class="code-quote">"/topic/topicDetail.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/topic/topicDetail/topicDetail-tid-*-rid-*.htm"</SPAN> value=<SPAN class="code-quote">"/topic/topicDetail.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/search-cid-*.htm"</SPAN> value=<SPAN class="code-quote">"/search/search.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/page/*.html"</SPAN> value=<SPAN class="code-quote">"/search/search.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/search-tid-*.htm"</SPAN> value=<SPAN class="code-quote">"/search/search.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/search-searchWord-*.htm"</SPAN> value=<SPAN class="code-quote">"/search/search.htm"</SPAN>/&gt;
            &lt;entry key=<SPAN class="code-quote">"/search-tid-*-cid-*.htm"</SPAN> value=<SPAN class="code-quote">"/search/search.htm"</SPAN>/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
    &lt;property name=<SPAN class="code-quote">"urlDecode"</SPAN> value=<SPAN class="code-quote">"<SPAN class="code-keyword">false</SPAN>"</SPAN>/&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. JapanSimpleUrlHandlerMapping的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&nbsp;<SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.runtime.springmvc.servlet.handler;

<SPAN class="code-keyword">import</SPAN> java.util.LinkedHashMap;
<SPAN class="code-keyword">import</SPAN> java.util.Map;
<SPAN class="code-keyword">import</SPAN> java.util.Properties;
<SPAN class="code-keyword">import</SPAN> java.util.Map.Entry;

<SPAN class="code-keyword">import</SPAN> org.springframework.beans.BeansException;
<SPAN class="code-keyword">import</SPAN> org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;

<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.module.ModulePattern;

/**
 * 此类扩展了Spring MVC的SimpleUrlHandlerMapping&lt;br&gt;
 * 加入了自定义url mapping的规则
 *
 * @author:shaochuan.wangsc
 * @date:2009-3-24
 *
 */
<SPAN class="code-keyword">public</SPAN> class JapanSimpleUrlHandlerMapping <SPAN class="code-keyword">extends</SPAN> SimpleUrlHandlerMapping {

    <SPAN class="code-keyword">private</SPAN> ModulePattern modulePattern;

    <SPAN class="code-keyword">private</SPAN> Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; moduleUrlMap = <SPAN class="code-keyword">new</SPAN> LinkedHashMap&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt;();

    <SPAN class="code-keyword">public</SPAN> void setModuleUrlMap(Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; moduleUrlMap) {
        <SPAN class="code-keyword">this</SPAN>.moduleUrlMap = moduleUrlMap;
    }

    <SPAN class="code-keyword">public</SPAN> void setModulePattern(ModulePattern modulePattern) {
        <SPAN class="code-keyword">this</SPAN>.modulePattern = modulePattern;
    }

    @SuppressWarnings(<SPAN class="code-quote">"unchecked"</SPAN>)
    <SPAN class="code-keyword">private</SPAN> void initModuleUrlMap() {
        Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; urlMap = getUrlMap();
        Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; urlMapping = modulePattern.getUrlMapping();
        <SPAN class="code-keyword">for</SPAN> (Entry&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; entry : moduleUrlMap.entrySet()) {
            <SPAN class="code-object">String</SPAN> key = entry.getKey();
            <SPAN class="code-object">String</SPAN> value = entry.getValue();
            <SPAN class="code-keyword">if</SPAN> (urlMap.get(key) == <SPAN class="code-keyword">null</SPAN>) {
                urlMap.put(key, urlMapping.get(value));
            }
        }
    }

    @SuppressWarnings(<SPAN class="code-quote">"unchecked"</SPAN>)
    <SPAN class="code-keyword">private</SPAN> void initCustomerUrlMapping() {
        Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; urlMap = getUrlMap();
        Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; urlMapping = modulePattern.getUrlMapping();
        <SPAN class="code-keyword">for</SPAN> (Entry&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; entry : urlMapping.entrySet()) {
            <SPAN class="code-object">String</SPAN> key = entry.getKey();
            <SPAN class="code-object">Object</SPAN> value = entry.getValue();
            <SPAN class="code-keyword">if</SPAN> (urlMap.get(key) == <SPAN class="code-keyword">null</SPAN>) {
                urlMap.put(key, value);
            }
        }
    }

    /**
     * Map URL paths to handler bean names. This is the typical way of configuring <SPAN class="code-keyword">this</SPAN> HandlerMapping.
     * &lt;p&gt;
     * Supports direct URL matches and Ant-style pattern matches. For syntax details, see the
     * {@link org.springframework.util.AntPathMatcher} javadoc.
     *
     * @param mappings properties with URLs as keys and bean names as values
     * @see #setUrlMap
     */
    <SPAN class="code-keyword">public</SPAN> void setMappings(Properties mappings) {
        setUrlMap(mappings);
    }

    /**
     * Set a Map with URL paths as keys and handler beans (or handler bean names) as values. Convenient <SPAN class="code-keyword">for</SPAN> population
     * with bean references.
     * &lt;p&gt;
     * Supports direct URL matches and Ant-style pattern matches. For syntax details, see the
     * {@link org.springframework.util.AntPathMatcher} javadoc.
     *
     * @param urlMap map with URLs as keys and beans as values
     * @see #setMappings
     */
    @SuppressWarnings(<SPAN class="code-quote">"unchecked"</SPAN>)
    <SPAN class="code-keyword">public</SPAN> void setUrlMap(Map urlMap) {
        <SPAN class="code-keyword">if</SPAN> (urlMap != <SPAN class="code-keyword">null</SPAN>) {
            getUrlMap().putAll(urlMap);
        }
    }

    @Override
    <SPAN class="code-keyword">public</SPAN> void initApplicationContext() <SPAN class="code-keyword">throws</SPAN> BeansException {
        initModuleUrlMap();
        initCustomerUrlMapping();
        <SPAN class="code-keyword">super</SPAN>.initApplicationContext();
    }
}</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，<FONT color="#0000cc"><B>JapanSimpleUrlHandlerMapping</B></FONT>继承<FONT color="#0000cc"><B>SimpleUrlHandlerMapping</B></FONT>，并扩展了部分功能。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，从<FONT color="#0000cc"><B>JapanSimpleUrlHandlerMapping</B></FONT>的源代码，我们可以看得出来：<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1). 先初始化"<FONT color="#0000cc"><B>moduleUrlMap</B></FONT>"属性中注册的URL；前提是注册的URL中的目标URL（即value中的URL）一定要在"<FONT color="#0000cc"><B>modulePattern</B></FONT>"中注册过（注册是通过<FONT color="#0000cc"><B>JapanBeanScanner</B></FONT>自动扫描注册进去的）。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如：&lt;entry key="/search.htm" value="/search/search.htm"/&gt;<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2). 然后实始化"<FONT color="#0000cc"><B>modulePattern</B></FONT>"中自动注册过URL。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3). 最后再将整个<FONT color="#0000cc"><B>HandlerMapping</B></FONT>注册到整个Web框架中。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. 最后，&lt;property name="urlDecode" value="false"/&gt;：作用是让当前的Spring MVC框架处理的URL并不进行任何的解码。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4. 应用举例如下（详细举例会在具体的应用举例篇进行详细说明）：<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1). <SPAN class="nobr"><A href="http://host:port/search.htm" rel="nofollow">http://host:port/search.htm<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN> ----&gt; /home/control/searc/searchController.java<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <SPAN class="nobr"><A href="http://host:port/search/search.htm" rel="nofollow">http://host:port/search/search.htm<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN> --&gt; /home/control/search/searchController.java<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2). <SPAN class="nobr"><A href="http://host:port//topic/topicDetail/123456.htm" rel="nofollow">http://host:port//topic/topicDetail/123456.htm<SUP><IMG class="rendericon" src="./5. applicationContext.xml - Confluence_files/linkext7.gif" height="7" width="7" align="absmiddle" alt="" border="0"></SUP></A></SPAN> ----&gt; /home/control/topic/topicDetailController.java</P>

<H3><A name="5.applicationContext.xml-9.SpringMVC%E7%9A%84HandlerExceptionResolver%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AF%B4%E6%98%8E"></A>9.Spring MVC的HandlerExceptionResolver相关配置及说明</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中HandlerExceptionResolver的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 HandlerExceptionResolver --&gt;
&lt;bean id=<SPAN class="code-quote">"handlerExceptionResolver"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.servlet.handler.JapanSimpleMappingExceptionResolver"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"defaultErrorView"</SPAN> value=<SPAN class="code-quote">"/home/error"</SPAN>/&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. JapanSimpleMappingExceptionResolver的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java"><SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.runtime.springmvc.servlet.handler;

<SPAN class="code-keyword">import</SPAN> java.util.Enumeration;
<SPAN class="code-keyword">import</SPAN> java.util.Map;
<SPAN class="code-keyword">import</SPAN> java.util.Properties;
<SPAN class="code-keyword">import</SPAN> java.util.Map.Entry;

<SPAN class="code-keyword">import</SPAN> javax.servlet.http.HttpServletRequest;

<SPAN class="code-keyword">import</SPAN> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;

<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.exception.SpringMVCException;

/**
 * 该类是SimpleMappingExceptionResolver的扩展类&lt;br&gt;
 * SimpleMappingExceptionResolver类支持特定异常类型跳转到指定页面的功能&lt;br&gt;
 * 如:&lt;br&gt;
 * &lt;code&gt; com.alibaba.japan.club.web.module.home.exception.ClubException --&gt; /home/error &lt;/code&gt; &lt;br&gt;
 * &lt;br&gt;
 * JapanSimpleMappingExceptionResolver类实现通过异常中的errorCode属性来实现支持指定异常页面跳转的功能&lt;br&gt;
 * 如:&lt;br&gt;
 * &lt;code&gt;
 *         com.alibaba.japan.club.web.module.home.exception.ClubException: &lt;br&gt;
 *         errorCode = <SPAN class="code-quote">"0"</SPAN> --&gt; /home/error &lt;br&gt;
 *         errorCode = <SPAN class="code-quote">"1"</SPAN> --&gt; /home/index &lt;br&gt;
 * &lt;/code&gt;
 *
 *
 * @author:shaochuan.wangsc
 * @date:2009-3-24
 *
 */
<SPAN class="code-keyword">public</SPAN> class JapanSimpleMappingExceptionResolver <SPAN class="code-keyword">extends</SPAN> SimpleMappingExceptionResolver {

    /**
     * mapping映射文件
     */
    <SPAN class="code-keyword">private</SPAN> Map&lt;<SPAN class="code-object">String</SPAN>, Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt;&gt; exceptionsMapping;

    <SPAN class="code-keyword">private</SPAN> Properties exceptionMappings;

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-object">String</SPAN> defaultErrorView;

    <SPAN class="code-keyword">public</SPAN> void setExceptionsMapping(Map&lt;<SPAN class="code-object">String</SPAN>, Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt;&gt; exceptionsMapping) {
        <SPAN class="code-keyword">this</SPAN>.exceptionsMapping = exceptionsMapping;
    }

    /**
     * Set the mappings between exception class names and error view names. The exception class name can be a substring,
     * with no wildcard support at present. A value of <SPAN class="code-quote">"ServletException"</SPAN> would match
     * &lt;code&gt;javax.servlet.ServletException&lt;/code&gt; and subclasses, <SPAN class="code-keyword">for</SPAN> example.
     * &lt;p&gt;
     * &lt;b&gt;NB:&lt;/b&gt; Consider carefully how specific the pattern is, and whether to include <SPAN class="code-keyword">package</SPAN> information (which
     * isn't mandatory). For example, <SPAN class="code-quote">"Exception"</SPAN> will match nearly anything, and will probably hide other rules.
     * <SPAN class="code-quote">"java.lang.Exception"</SPAN> would be correct <SPAN class="code-keyword">if</SPAN> <SPAN class="code-quote">"Exception"</SPAN> was meant to define a rule <SPAN class="code-keyword">for</SPAN> all checked exceptions. With
     * more unusual exception names such as <SPAN class="code-quote">"BaseBusinessException"</SPAN> there's no need to use a FQN.
     * &lt;p&gt;
     * Follows the same matching algorithm as RuleBasedTransactionAttribute and RollbackRuleAttribute.
     *
     * @param mappings exception patterns (can also be fully qualified class names) as keys, and error view names as
     *            values
     * @see org.springframework.transaction.interceptor.RuleBasedTransactionAttribute
     * @see org.springframework.transaction.interceptor.RollbackRuleAttribute
     */
    <SPAN class="code-keyword">public</SPAN> void setExceptionMappings(Properties mappings) {
        <SPAN class="code-keyword">this</SPAN>.exceptionMappings = mappings;
    }

    /**
     * Set the name of the <SPAN class="code-keyword">default</SPAN> error view. This view will be returned <SPAN class="code-keyword">if</SPAN> no specific mapping was found.
     * &lt;p&gt;
     * Default is none.
     */
    <SPAN class="code-keyword">public</SPAN> void setDefaultErrorView(<SPAN class="code-object">String</SPAN> defaultErrorView) {
        <SPAN class="code-keyword">this</SPAN>.defaultErrorView = defaultErrorView;
    }

    /**
     * Determine the view name <SPAN class="code-keyword">for</SPAN> the given exception, searching the {@link #setExceptionMappings <SPAN class="code-quote">"exceptionMappings"</SPAN>},
     * using the {@link #setDefaultErrorView <SPAN class="code-quote">"defaultErrorView"</SPAN>} as fallback.
     *
     * @param ex the exception that got thrown during handler execution
     * @param request current HTTP request (useful <SPAN class="code-keyword">for</SPAN> obtaining metadata)
     * @<SPAN class="code-keyword">return</SPAN> the resolved view name, or &lt;code&gt;<SPAN class="code-keyword">null</SPAN>&lt;/code&gt; <SPAN class="code-keyword">if</SPAN> none found
     */
    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-object">String</SPAN> determineViewName(Exception ex, HttpServletRequest request) {
        <SPAN class="code-object">String</SPAN> viewName = <SPAN class="code-keyword">null</SPAN>;
        <SPAN class="code-comment">// Check <SPAN class="code-keyword">for</SPAN> specific exceptions mapping.
</SPAN>        <SPAN class="code-keyword">if</SPAN> (<SPAN class="code-keyword">this</SPAN>.exceptionsMapping != <SPAN class="code-keyword">null</SPAN>) {
            viewName = findMatchingViewName(<SPAN class="code-keyword">this</SPAN>.exceptionsMapping, ex);
        }
        <SPAN class="code-comment">// Check <SPAN class="code-keyword">for</SPAN> specific exception mappings.
</SPAN>        <SPAN class="code-keyword">if</SPAN> (viewName == <SPAN class="code-keyword">null</SPAN> &amp;&amp; <SPAN class="code-keyword">this</SPAN>.exceptionMappings != <SPAN class="code-keyword">null</SPAN>) {
            viewName = findMatchingViewName(<SPAN class="code-keyword">this</SPAN>.exceptionMappings, ex);
        }
        <SPAN class="code-comment">// Return <SPAN class="code-keyword">default</SPAN> error view <SPAN class="code-keyword">else</SPAN>, <SPAN class="code-keyword">if</SPAN> defined.
</SPAN>        <SPAN class="code-keyword">if</SPAN> (viewName == <SPAN class="code-keyword">null</SPAN> &amp;&amp; <SPAN class="code-keyword">this</SPAN>.defaultErrorView != <SPAN class="code-keyword">null</SPAN>) {
            <SPAN class="code-keyword">if</SPAN> (logger.isDebugEnabled()) {
                logger.debug(<SPAN class="code-quote">"Resolving to <SPAN class="code-keyword">default</SPAN> view '"</SPAN> + <SPAN class="code-keyword">this</SPAN>.defaultErrorView + <SPAN class="code-quote">"' <SPAN class="code-keyword">for</SPAN> exception of type ["</SPAN>
                        + ex.getClass().getName() + <SPAN class="code-quote">"]"</SPAN>);
            }
            viewName = <SPAN class="code-keyword">this</SPAN>.defaultErrorView;
        }
        <SPAN class="code-keyword">return</SPAN> viewName;
    }

    /**
     * 找到符合自定义exceptions mapping的错误视图
     *
     * @param exceptionsMapping
     * @param ex
     * @<SPAN class="code-keyword">return</SPAN>
     */
    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-object">String</SPAN> findMatchingViewName(Map&lt;<SPAN class="code-object">String</SPAN>, Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt;&gt; exceptionsMapping, Exception ex) {
        <SPAN class="code-object">String</SPAN> viewName = <SPAN class="code-keyword">null</SPAN>;
        <SPAN class="code-object">String</SPAN> dominantMapping = <SPAN class="code-keyword">null</SPAN>;
        SpringMVCException exception;
        <SPAN class="code-object">int</SPAN> deepest = <SPAN class="code-object">Integer</SPAN>.MAX_VALUE;

        <SPAN class="code-keyword">for</SPAN> (Entry&lt;<SPAN class="code-object">String</SPAN>, Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt;&gt; entry : exceptionsMapping.entrySet()) {
            <SPAN class="code-object">String</SPAN> key = entry.getKey();
            Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">String</SPAN>&gt; value = entry.getValue();
            <SPAN class="code-object">int</SPAN> depth = getDepth(key, ex);
            <SPAN class="code-keyword">if</SPAN> (depth &gt;= 0 &amp;&amp; depth &lt; deepest) {
                dominantMapping = key;
                <SPAN class="code-keyword">if</SPAN> (ex <SPAN class="code-keyword">instanceof</SPAN> SpringMVCException) {
                    exception = (SpringMVCException) ex;
                    viewName = value.get(exception.getErrorCode());
                }
            }
            <SPAN class="code-keyword">if</SPAN> (viewName != <SPAN class="code-keyword">null</SPAN>) {
                <SPAN class="code-keyword">break</SPAN>;
            }
        }

        <SPAN class="code-keyword">if</SPAN> (viewName != <SPAN class="code-keyword">null</SPAN> &amp;&amp; logger.isDebugEnabled()) {
            logger.debug(<SPAN class="code-quote">"Resolving to view '"</SPAN> + viewName + <SPAN class="code-quote">"' <SPAN class="code-keyword">for</SPAN> exception of type ["</SPAN> + ex.getClass().getName()
                    + <SPAN class="code-quote">"], based on exception mapping ["</SPAN> + dominantMapping + <SPAN class="code-quote">"]"</SPAN>);
        }
        <SPAN class="code-keyword">return</SPAN> viewName;
    }

    /**
     * Find a matching view name in the given exception mappings.
     *
     * @param exceptionMappings mappings between exception class names and error view names
     * @param ex the exception that got thrown during handler execution
     * @<SPAN class="code-keyword">return</SPAN> the view name, or &lt;code&gt;<SPAN class="code-keyword">null</SPAN>&lt;/code&gt; <SPAN class="code-keyword">if</SPAN> none found
     * @see #setExceptionMappings
     */
    @SuppressWarnings(<SPAN class="code-quote">"unchecked"</SPAN>)
    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-object">String</SPAN> findMatchingViewName(Properties exceptionMappings, Exception ex) {
        <SPAN class="code-object">String</SPAN> viewName = <SPAN class="code-keyword">null</SPAN>;
        <SPAN class="code-object">String</SPAN> dominantMapping = <SPAN class="code-keyword">null</SPAN>;
        <SPAN class="code-object">int</SPAN> deepest = <SPAN class="code-object">Integer</SPAN>.MAX_VALUE;
        <SPAN class="code-keyword">for</SPAN> (Enumeration names = exceptionMappings.propertyNames(); names.hasMoreElements();) {
            <SPAN class="code-object">String</SPAN> exceptionMapping = (<SPAN class="code-object">String</SPAN>) names.nextElement();
            <SPAN class="code-object">int</SPAN> depth = getDepth(exceptionMapping, ex);
            <SPAN class="code-keyword">if</SPAN> (depth &gt;= 0 &amp;&amp; depth &lt; deepest) {
                deepest = depth;
                dominantMapping = exceptionMapping;
                viewName = exceptionMappings.getProperty(exceptionMapping);
            }
        }
        <SPAN class="code-keyword">if</SPAN> (viewName != <SPAN class="code-keyword">null</SPAN> &amp;&amp; logger.isDebugEnabled()) {
            logger.debug(<SPAN class="code-quote">"Resolving to view '"</SPAN> + viewName + <SPAN class="code-quote">"' <SPAN class="code-keyword">for</SPAN> exception of type ["</SPAN> + ex.getClass().getName()
                    + <SPAN class="code-quote">"], based on exception mapping ["</SPAN> + dominantMapping + <SPAN class="code-quote">"]"</SPAN>);
        }
        <SPAN class="code-keyword">return</SPAN> viewName;
    }
}</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，<FONT color="#0000cc"><B>JapanSimpleMappingExceptionResolver</B></FONT>是继承自<FONT color="#0000cc"><B>SimpleMappingExceptionResolver</B></FONT>，并扩展了其部分功能。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，findMatchingViewName(Map&lt;String, Map&lt;String, String&gt;&gt; exceptionsMapping, Exception ex)这个方法非常重要，它扩展了Spring自身的通过Exception获得视图的功能，而且加入了Exception的"<FONT color="#0000cc"><B>errorCode</B></FONT>"的概念，只要继承自<FONT color="#0000cc"><B>SpringMVCException</B></FONT>的异常，就可以通过配置来确定同一种类型的异常，不同的"<FONT color="#0000cc"><B>errorCode</B></FONT>"来跳转到不同的页面的功能，如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 HandlerExceptionResolver --&gt;
&lt;bean id=<SPAN class="code-quote">"handlerExceptionResolver"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.servlet.handler.JapanSimpleMappingExceptionResolver"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"defaultErrorView"</SPAN> value=<SPAN class="code-quote">"/home/error"</SPAN>/&gt;
    &lt;property name=<SPAN class="code-quote">"exceptionsMapping"</SPAN>&gt;
        &lt;map&gt;
            &lt;entry key=<SPAN class="code-quote">"com.alibaba.japan.club.web.module.home.exception.ClubException"</SPAN>&gt;
                &lt;map&gt;
                    &lt;entry key=<SPAN class="code-quote">"0"</SPAN> value=<SPAN class="code-quote">"/home/rules"</SPAN>/&gt;
                    &lt;entry key=<SPAN class="code-quote">"1"</SPAN> value=<SPAN class="code-quote">"forward:/index.htm"</SPAN>/&gt;
                    &lt;entry key=<SPAN class="code-quote">"2"</SPAN> value=<SPAN class="code-quote">"redirect:/index.htm"</SPAN>/&gt;
                &lt;/map&gt;
            &lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 1). ClubException是继承自SpringMVCException。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2). 如果Controller抛出的是ClubException并且ClubException的"errorCode"值为0，则系统会自动render"/home/rules"页面。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. 最后，详细举例会在具体的应用举例篇进行详细说明。</P>

<H3><A name="5.applicationContext.xml-10.SpringMVC%E7%9A%84RequestToViewNameTranslator%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AF%B4%E6%98%8E"></A>10.Spring MVC的RequestToViewNameTranslator相关配置及说明</H3>


<H3><A name="5.applicationContext.xml-11.SpringMVC%E7%9A%84ViewResolver%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%AF%B4%E6%98%8E"></A>11.Spring MVC的ViewResolver相关配置及说明</H3>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. /WEB-INF/config/applicationContext.xml文件中ViewResolver的配置片段如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java">&lt;!-- 设置 ViewResolver --&gt;
&lt;bean id=<SPAN class="code-quote">"freemarkerConfigurer"</SPAN> class=<SPAN class="code-quote">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"templateLoaderPath"</SPAN> value=<SPAN class="code-quote">"file:<SPAN class="code-comment">//${japan.club.templateRoot}"</SPAN> /&gt;
</SPAN>    &lt;property name=<SPAN class="code-quote">"defaultEncoding"</SPAN> value=<SPAN class="code-quote">"UTF-8"</SPAN> /&gt;
    &lt;property name=<SPAN class="code-quote">"freemarkerSettings"</SPAN>&gt;
        &lt;props&gt;
            &lt;prop key=<SPAN class="code-quote">"number_format"</SPAN>&gt;#&lt;/prop&gt;
            &lt;prop key=<SPAN class="code-quote">"template_update_delay"</SPAN>&gt;0&lt;/prop&gt;
            &lt;prop key=<SPAN class="code-quote">"classic_compatible"</SPAN>&gt;<SPAN class="code-keyword">true</SPAN>&lt;/prop&gt;
            &lt;prop key=<SPAN class="code-quote">"auto_import"</SPAN>&gt;/macro/macros.ftl as japan&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;!--  --&gt;
&lt;bean id=<SPAN class="code-quote">"freemarkerScreenResolver"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.servlet.view.freemarker.FreeMarkerScreenResolver"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"freemarkerConfigurer"</SPAN> ref=<SPAN class="code-quote">"freemarkerConfigurer"</SPAN>/&gt;
    &lt;property name=<SPAN class="code-quote">"modulePattern"</SPAN> ref=<SPAN class="code-quote">"modulePattern"</SPAN>/&gt;
&lt;/bean&gt;
&lt;!--  --&gt;
&lt;bean id=<SPAN class="code-quote">"freemarkerResolver"</SPAN> class=<SPAN class="code-quote">"com.alibaba.japan.club.runtime.springmvc.servlet.view.freemarker.JapanFreeMarkerViewResolver"</SPAN>&gt;
    &lt;property name=<SPAN class="code-quote">"prefix"</SPAN> value="" /&gt;
    &lt;property name=<SPAN class="code-quote">"suffix"</SPAN> value=<SPAN class="code-quote">".ftl"</SPAN> /&gt;
    &lt;property name=<SPAN class="code-quote">"contentType"</SPAN> value=<SPAN class="code-quote">"text/html; charset=UTF-8"</SPAN> /&gt;
    &lt;property name=<SPAN class="code-quote">"attributesMap"</SPAN>&gt;
        &lt;map&gt;
            &lt;entry key=<SPAN class="code-quote">"freemarkerScreenResolver"</SPAN> value-ref=<SPAN class="code-quote">"freemarkerScreenResolver"</SPAN>/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
    &lt;property name=<SPAN class="code-quote">"moduleAttributes"</SPAN> ref=<SPAN class="code-quote">"moduleAttributes"</SPAN>/&gt;
&lt;/bean&gt;</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT color="#660000"><B>说明：</B></FONT>1. 首先，"<FONT color="#0000ff"><B>freemarkerConfigurer</B></FONT>"元素设置了Spring MVC框架的Freemarker模版的相关参数，具体的参数含义如下：<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1). &lt;property name="templateLoaderPath"/&gt;：页面模版的存放位置（默认是WEB-INF为模版的根目录，file: --&gt; 本地磁盘路径）。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2). &lt;property name="defaultEncoding"/&gt;：设置页面模版的输入/输出编码处理。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3). &lt;property name="freemarkerSettings"/&gt;：设置Freemarker组件的相关属性。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a). &lt;prop key="number_format"/&gt;：设置Freemarker的数字类型的输出格式（默认为：#,### = 1,000，现在为：# = 10000）。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b). &lt;prop key="template_update_delay"/&gt;：设置Freemarker模版的缓存时间，以秒为单位（如果设置为0，则不缓存Freemarker模版）。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c). &lt;prop key="classic_compatible"/&gt;：设置Freemarker模版输入变量不存时，则以空字符串""输出到页面。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d). &lt;prop key="auto_import"/&gt;：设置Freemarker模版的宏，并且自动导入宏。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 再次，"<FONT color="#0000cc"><B>freemarkerScreenResolver</B></FONT>"元素设置了该框架自定义的Screen（功能相当于Freemarker的&lt;#include/&gt;，但是还有些区别）。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1). 导入"<FONT color="#0000cc"><B>freemarkerConfigurer</B></FONT>"元素，目的是为了实现Freemarker的&lt;#include/&gt;功能，所以需要调用Freemarker的模版。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2). 导入"<FONT color="#0000cc"><B>modulePattern</B></FONT>"元素，目的是通过模版文件名来调用"<FONT color="#0000cc"><B>modulePattern</B></FONT>"中自动注册的Screen类。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3). 详细举例会在具体的应用举例篇进行详细说明。<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. 最后，"<FONT color="#0000cc"><B>freemarkerResolver</B></FONT>"元素定义了Spring MVC框架的页面处理的相关参数，具体的参数含义如下：<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1). &lt;property name="prefix" value="" /&gt;：设置页面模版的统一前缀，这样如果每个页面都有统一前缀的话，则不需要每个都进行处理了。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2). &lt;property name="suffix" value=".ftl" /&gt;：设置页面模版的统一后缀，这样如果每个页面都有统一后缀的话，而不需每个都进行处理。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如：/home/index，系统会自动访问/home/index.flt页面。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3). &lt;property name="contentType" value="text/html; charset=UTF-8" /&gt;：统一设置html页面统出的编码为UTF-8，而不需要每个页面独立设置。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4). &lt;property name="attributesMap"&gt;：设置页面的全局变量。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a). &lt;entry key="freemarkerScreenResolver" value-ref="freemarkerScreenResolver"/&gt;：将"freemarkerScreenResolver"设置成全局变量。<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6). &lt;property name="moduleAttributes" ref="moduleAttributes"/&gt;：此属性是该框架扩展的一个属性，主要是为了支持把Map类型的值也可以统一设置成全局变量。</P>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. FreeMarkerScreenResolver的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java"><SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.runtime.springmvc.servlet.view.freemarker;

<SPAN class="code-keyword">import</SPAN> java.io.StringWriter;
<SPAN class="code-keyword">import</SPAN> java.util.HashMap;
<SPAN class="code-keyword">import</SPAN> java.util.Map;
<SPAN class="code-keyword">import</SPAN> java.util.Map.Entry;

<SPAN class="code-keyword">import</SPAN> org.apache.log4j.Logger;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.i18n.LocaleContext;
<SPAN class="code-keyword">import</SPAN> org.springframework.context.i18n.LocaleContextHolder;
<SPAN class="code-keyword">import</SPAN> org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.module.ModuleHelper;
<SPAN class="code-keyword">import</SPAN> com.alibaba.japan.club.runtime.springmvc.module.ModulePattern;

<SPAN class="code-keyword">import</SPAN> freemarker.template.Configuration;
<SPAN class="code-keyword">import</SPAN> freemarker.template.Template;

/**
 * screen类的调用类
 *
 * @author:shaochuan.wangsc
 * @date:2009-3-24
 *
 */
<SPAN class="code-keyword">public</SPAN> class FreeMarkerScreenResolver {

    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-keyword">static</SPAN> <SPAN class="code-keyword">final</SPAN> Logger logger = Logger.getLogger(FreeMarkerScreenResolver.class);

    <SPAN class="code-keyword">private</SPAN> FreeMarkerConfigurer freemarkerConfigurer;

    <SPAN class="code-keyword">private</SPAN> ModulePattern modulePattern;

    <SPAN class="code-keyword">public</SPAN> void setFreemarkerConfigurer(FreeMarkerConfigurer freemarkerConfigurer) {
        <SPAN class="code-keyword">this</SPAN>.freemarkerConfigurer = freemarkerConfigurer;
    }

    <SPAN class="code-keyword">public</SPAN> void setModulePattern(ModulePattern modulePattern) {
        <SPAN class="code-keyword">this</SPAN>.modulePattern = modulePattern;
    }

    /**
     * 获得系统中已注册的screen类名
     *
     * @param file
     * @<SPAN class="code-keyword">return</SPAN>
     */
    <SPAN class="code-keyword">private</SPAN> FreeMarkerScreen getScreenBean(<SPAN class="code-object">String</SPAN> file) {
        <SPAN class="code-object">String</SPAN> screenBeanName = ModuleHelper.getScreenBeanName(file);
        FreeMarkerScreen freeMarkerScreen = <SPAN class="code-keyword">null</SPAN>;
        freeMarkerScreen = (FreeMarkerScreen) (modulePattern.getScreenMapping().get(screenBeanName));
        <SPAN class="code-keyword">if</SPAN> (freeMarkerScreen == <SPAN class="code-keyword">null</SPAN>) {
            <SPAN class="code-keyword">if</SPAN> (logger.isDebugEnabled()) {
                logger.debug(<SPAN class="code-quote">"There is no FreeMarkerScreen("</SPAN> + screenBeanName + <SPAN class="code-quote">") <SPAN class="code-keyword">for</SPAN> : "</SPAN> + file);
            }
        }
        <SPAN class="code-keyword">return</SPAN> freeMarkerScreen;
    }

    /**
     * 将freeMarkerRootModel放入到当前的model中
     *
     * @param model
     * @param freemarkerRootModel
     */
    <SPAN class="code-keyword">private</SPAN> void putFreeMarkerRootModel(Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; model, Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; freemarkerRootModel) {
        <SPAN class="code-keyword">for</SPAN> (Entry&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; element : freemarkerRootModel.entrySet()) {
            <SPAN class="code-object">String</SPAN> key = element.getKey();
            <SPAN class="code-object">Object</SPAN> value = element.getValue();
            <SPAN class="code-keyword">if</SPAN> (model.get(key) == <SPAN class="code-keyword">null</SPAN>) {
                model.put(key, value);
            } <SPAN class="code-keyword">else</SPAN> {
                <SPAN class="code-keyword">throw</SPAN> <SPAN class="code-keyword">new</SPAN> RuntimeException(<SPAN class="code-quote">"Cannot expose model attribute '"</SPAN> + key
                        + <SPAN class="code-quote">"' because of an existing model object of the same name"</SPAN>);
            }
        }
    }

    /**
     * 渲染screen
     *
     * @param freemarkerRootModel
     * @param screenBean
     * @param file
     * @<SPAN class="code-keyword">return</SPAN>
     */
    <SPAN class="code-keyword">private</SPAN> <SPAN class="code-object">String</SPAN> renderScreen(Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; freemarkerRootModel, FreeMarkerScreen screenBean, <SPAN class="code-object">String</SPAN> file)
            <SPAN class="code-keyword">throws</SPAN> Exception {
        Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; model = <SPAN class="code-keyword">new</SPAN> HashMap&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt;();

        Configuration configuration = freemarkerConfigurer.getConfiguration();
        StringWriter writer = <SPAN class="code-keyword">new</SPAN> StringWriter();
        Template template = <SPAN class="code-keyword">null</SPAN>;
        LocaleContext localeContext = LocaleContextHolder.getLocaleContext();

        <SPAN class="code-keyword">if</SPAN> (screenBean != <SPAN class="code-keyword">null</SPAN>) {
            screenBean.referenceData(model);
        }
        putFreeMarkerRootModel(model, freemarkerRootModel);
        template = configuration.getTemplate(file, localeContext.getLocale());
        template.process(model, writer);
        <SPAN class="code-keyword">return</SPAN> writer.toString();
    }

    /**
     * 设置screen
     *
     * @param req
     * @param root
     * @param file
     */
    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-object">String</SPAN> setTemplate(Map&lt;<SPAN class="code-object">String</SPAN>, <SPAN class="code-object">Object</SPAN>&gt; freemarkerRootModel, <SPAN class="code-object">String</SPAN> file) {
        <SPAN class="code-comment">// 如果传入的字符串为null或是空串,则返回空字符串
</SPAN>        <SPAN class="code-object">String</SPAN> screen = "";
        <SPAN class="code-keyword">if</SPAN> (file == <SPAN class="code-keyword">null</SPAN> || "".equals((file = file.trim()))) {
            <SPAN class="code-keyword">return</SPAN> screen;
        }
        <SPAN class="code-comment">// 开始执行screen类
</SPAN>        FreeMarkerScreen screenBean = <SPAN class="code-keyword">null</SPAN>;
        <SPAN class="code-keyword">try</SPAN> {
            screenBean = getScreenBean(file);
            screen = renderScreen(freemarkerRootModel, screenBean, file);
        } <SPAN class="code-keyword">catch</SPAN> (Exception exception) {
            <SPAN class="code-keyword">throw</SPAN> <SPAN class="code-keyword">new</SPAN> RuntimeException(<SPAN class="code-quote">"Cannot setTemplate("</SPAN> + file + <SPAN class="code-quote">"), because of an exception occurred"</SPAN>, exception);
        }
        <SPAN class="code-keyword">return</SPAN> screen;
    }
}</PRE>
</DIV></DIV>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. JapanFreeMarkerViewResolver的代码如下：</P>
<DIV class="code panel" style="border-width: 1px;"><DIV class="codeContent panelContent">
<PRE class="code-java"><SPAN class="code-keyword">package</SPAN> com.alibaba.japan.club.runtime.springmvc.servlet.view.freemarker;

<SPAN class="code-keyword">import</SPAN> java.util.Map;

<SPAN class="code-keyword">import</SPAN> org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;

<SPAN class="code-keyword">public</SPAN> class JapanFreeMarkerViewResolver <SPAN class="code-keyword">extends</SPAN> FreeMarkerViewResolver {

    /**
     * 将host的module属性设置到freemarker的全局静态变量中
     *
     * @param hostModuleAttributes
     */
    @SuppressWarnings(<SPAN class="code-quote">"unchecked"</SPAN>)
    <SPAN class="code-keyword">public</SPAN> void setModuleAttributes(Map&lt;<SPAN class="code-object">String</SPAN>,<SPAN class="code-object">String</SPAN>&gt; moduleAttributes) {
        getAttributesMap().putAll(moduleAttributes);
    }

    /**
     * Requires FreeMarkerView.java
     *
     * @see JapanFreeMarkerView
     */
    @SuppressWarnings(<SPAN class="code-quote">"unchecked"</SPAN>)
    <SPAN class="code-keyword">public</SPAN> <SPAN class="code-object">Class</SPAN> requiredViewClass() {
        <SPAN class="code-keyword">return</SPAN> JapanFreeMarkerView.class;
    }
}</PRE>
</DIV></DIV>
</DIV>

<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dc="http://purl.org/dc/elements/1.1/"
         xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
    rdf:about="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml"
    dc:identifier="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml"
    dc:title="5. applicationContext.xml"
    trackback:ping="http://b2b-doc.alibaba-inc.com/rpc/trackback/31248777"/>
</rdf:RDF>
-->
        

<!--
    Root decorator: all decisions about how a page is to be decorated via the
                    inline decoration begins here.
-->



<!--
    Switch based upon the context. However, for now, just delegate to a decorator
    identified directly by the context.
-->


    
    

<DIV class="wiki-content" style="margin-right:10px;">
    <P style="clear: both"><!-- comments should always display underneath the content. we should have a 'clear:both' here just in case there are floats or aligned images in the content -->

    
    
    
    
                                        </P><DIV style="margin-top: 30px;">
                <A href="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml?showComments=true&showCommentArea=true#addcomment"><IMG src="./5. applicationContext.xml - Confluence_files/add_comment_16.gif" height="16" width="16" border="0" align="absmiddle"></A>
                <A href="http://b2b-doc.alibaba-inc.com/display/jcbu/5.+applicationContext.xml?showComments=true&showCommentArea=true#addcomment">Add Comment</A>
                </DIV>
                        </DIV>
                            </DIV>
                        </TD>
                            
    
        
    
                                                </TR>
                </TBODY></TABLE>
                <!-- End inner content table -->
            </TD>
        </TR>
    </TBODY></TABLE>
</DIV>
<DIV id="footer">
                                        <UL id="poweredby">
        <LI>Powered by <A href="http://www.atlassian.com/software/confluence" class="smalltext">Atlassian Confluence</A> 2.8.1, the <A href="http://www.atlassian.com/software/confluence" class="smalltext">Enterprise Wiki</A>.</LI>
        <LI><A href="http://jira.atlassian.com/secure/BrowseProject.jspa?id=10470" class="smalltext">Bug/feature request</A> –</LI>
        <LI><A href="http://www.atlassian.com/about/connected.jsp?s_kwcid=Confluence-stayintouch" class="smalltext">Atlassian news</A> –</LI>
        <LI><A href="http://b2b-doc.alibaba-inc.com/administrators.action">Contact administrators</A></LI>
    </UL>

    <!-- delay the loading of large javascript files to the end so that they don't interfere with the loading of page content -->
    <SPAN class="hidden scripts">
        <SCRIPT type="text/javascript">var domainName = 'http://b2b-doc.alibaba-inc.com'; var entityId = '31248777'; var spaceKey = 'jcbu'</SCRIPT>
        <SCRIPT type="text/javascript" src="./5. applicationContext.xml - Confluence_files/labels-javascript"></SCRIPT>
        <SCRIPT>new Ajax.Autocompleter('labelName', 'labelsAutocompleteList', '31248777', { tokens: new Array(',', ' '), dwrFunction: GenerateAutocompleteLabelsListForEntity.autocompleteLabels});</SCRIPT>
    </SPAN>
</DIV></BODY></HTML>